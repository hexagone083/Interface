/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TD4_Dessin;

import Outils.Tools;
import java.awt.Color;
import java.awt.event.KeyEvent;
import static javax.swing.SwingUtilities.isLeftMouseButton;
import static javax.swing.SwingUtilities.isRightMouseButton;

/**
 *
 * @author florian
 */
public class Exo2_Editeurpolylignes extends javax.swing.JFrame {

    /**
     * Creates new form Exo2_Editeurpolylignes
     */
    public Exo2_Editeurpolylignes() {
        valeur_maximum = 254;
        initComponents();
        Tools.windowsInit(this);
        etat = Etat.Init;
        //rien
        initNombrePoints();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panel = new Outil_DrawLine.LigneMultiples();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        panel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                panelMouseDragged(evt);
            }
        });
        panel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                panelMouseClicked(evt);
            }
        });
        panel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                panelKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 506, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 446, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void panelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseClicked
        if (isRightMouseButton(evt)) {
            clickDroit(evt);
        } else if (isLeftMouseButton(evt)) {
            clickGauche(evt);
        }
    }//GEN-LAST:event_panelMouseClicked

    private void clickDroit(java.awt.event.MouseEvent evt) {
        switch (etat) {
            case Init:
                etat = Etat.Init;
                //Ne rien Faire
                initNombrePoints();
                break;
            case UnPoint:
                etat = Etat.UnPoint;
                //Ne rien Faire
                //n = n
                break;
            case Plusieurs:
                if (nombrePoints() > 2) {
                    etat = Etat.Plusieurs;
                    supprimerDernierPoint();
                    tracerPolyligneNoire();
                    tracerLigneTemporaire();
                    decrementNombrePoints();
                } else if (nombrePoints() <= 2) {
                    etat = Etat.UnPoint;
                    supprimerDernierPoint();
                    tracerPolyligneNoire();
                    tracerLigneTemporaire();
                    setValeurNombrePoint(1);
                }
                break;

            case Max:
                etat = Etat.Plusieurs;
                supprimerDernierPoint();
                tracerPolyligneNoire();
                tracerLigneTemporaire();
                decrementNombrePoints();
                break;

        }
    }

    private void clickGauche(java.awt.event.MouseEvent evt) {
        switch (etat) {
            case Init:
                etat = Etat.UnPoint;
                panel.ajouterPoint(evt.getPoint());
                incrementNombrePoints();
                break;
            case UnPoint:
                etat = Etat.Plusieurs;
                panel.ajouterPoint(evt.getPoint());
                tracerPolyligneNoire();
                incrementNombrePoints();
                break;
            case Plusieurs:
                if (nombrePoints() < valeur_maximum) {
                    etat = Etat.Plusieurs;
                    panel.ajouterPoint(evt.getPoint());
                    tracerPolyligneNoire();
                    incrementNombrePoints();
                } else if (nombrePoints() <= valeur_maximum) {
                    etat = Etat.Max;
                    panel.ajouterPoint(evt.getPoint());
                    tracerPolyligneNoire();
                    incrementNombrePoints();
                }
                break;
            case Max:
                etat = Etat.Max;
                //Rien
                //n = n;
                break;

        }
    }

    private void panelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_panelMouseDragged
        switch (etat) {
            case Init:
                etat = Etat.Init;
                //Ne rien faire
                initNombrePoints();
                break;
            case UnPoint:
                etat = Etat.UnPoint;
                tracerLigneTemporaire();
                //n = n;
                break;
            case Plusieurs:
                etat = Etat.Plusieurs;
                tracerLigneTemporaire();
                //n = n;
                break;
            case Max:
                etat = Etat.Plusieurs;
                tracerLigneTemporaire();
                //n = n;
                break;

        }
    }//GEN-LAST:event_panelMouseDragged

    private void KeyPressEnter(java.awt.event.KeyEvent evt) {
        switch (etat) {
            case Init:
                etat = Etat.Init;
                //Ne rien faire
                initNombrePoints();
                break;
            case UnPoint:
                etat = Etat.Init;
                enregistrerPolyligne();
                tracerPolylignesRouge();
                initNombrePoints();
                break;
            case Plusieurs:
                etat = Etat.Init;
                enregistrerPolyligne();
                tracerPolylignesRouge();
                initNombrePoints();
                break;
            case Max:
                etat = Etat.Init;
                enregistrerPolyligne();
                tracerPolylignesRouge();
                initNombrePoints();
                break;

        }
    }

    private void panelKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_panelKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            KeyPressEnter(evt);
        }
    }//GEN-LAST:event_panelKeyPressed

    /**
     * Méthodes de gestion des points
     */
    private void initNombrePoints() {
        panel.setNombre_points(0);
    }

    private void incrementNombrePoints() {
        panel.setNombre_points(panel.getNombre_points() + 1);
    }

    private void decrementNombrePoints() {
        panel.setNombre_points(panel.getNombre_points() - 1);
    }

    private int nombrePoints() {
        return panel.getNombre_points();
    }

    private void supprimerDernierPoint() {
        panel.supprimePremier();
    }

    private void setValeurNombrePoint(int valeur) {
        panel.setNombre_points(valeur);
    }

    /**
     * Méthodes de tracage
     */
    private void tracerPolyligneNoire() {
        panel.setCouleur(Color.BLACK);
        panel.repaint();
    }

    private void tracerLigneTemporaire() {

    }
    private void enregistrerPolyligne() {
     
    }

    private void tracerPolylignesRouge() {
      
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Exo2_Editeurpolylignes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Exo2_Editeurpolylignes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Exo2_Editeurpolylignes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Exo2_Editeurpolylignes.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Exo2_Editeurpolylignes().setVisible(true);
            }
        });
    }

    

    //Liste des états
    private enum Etat {
        Init, UnPoint, Plusieurs, Max
    }
    private Etat etat;
    private final int valeur_maximum;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private Outil_DrawLine.LigneMultiples panel;
    // End of variables declaration//GEN-END:variables
}
